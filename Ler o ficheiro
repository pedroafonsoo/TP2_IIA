#include _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <algorithms.h>



 //leitura do ficheiro
//Vai receber o nome do ficheiro,o numero de vertices(nvert) e numero de arestas(narest)
//retorna o valor da matriz

	int*inic_dados(char *nome, int *nvert, int *narest)
  {

	  FILE *f;
	  int vect1,vect2; //Declaracão dos vectores
	  int i, j,k;
	  char buffer[1000];

	  f = fopen(nome, "r");
	  if (!f)
	  {
		  printf("Erro ao aceder ao ficheiro dos dados\n");
		  exit(1);
	  }


	  //LER  Numero de vertices e arestas
	  while (buffer[0] != 'p')
		  fgets(buf, sizeof buf, f);
	  sscanf(buf, "p edge %d %d", nVertices, nArestas);


	  printf("nVertices: %d nArestas: %d", *nVertices, *nArestas);


	  // Alocacao dinamica da matriz

	  int **m = (int**)malloc(*numVertices * sizeof(int*)); //Aloca um Vetor de Ponteiros

	  for (i = 0; i < *numVertices; i++) {     //Percorre as linhas do Vetor de Ponteiros
		  m[i] = (int*)malloc(*numVertices * sizeof(int));    //Aloca um Vetor de Inteiros para cada posição do Vetor de Ponteiros.
		  for (j = 0; j < *numVertices; j++) {   //Percorre o Vetor de Inteiros atual.
			  m[i][j] = 0;    //Inicializa com 0.
		  }
	  }
	if (!m)
	{
		printf("Erro na alocacao de memoria\n");
		exit(1);
	}

	  // Preenchimento da matriz
	while (fgets(buf, sizeof buf, f))
	{
		sscanf(buf, "e %d %d", &v1, &v2);
		m[v1 - 1][v2 - 1] = 1;
		m[v2 - 1][v1 - 1] = 1;
	}



	return m;
	}

